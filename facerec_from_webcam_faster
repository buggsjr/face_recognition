#Import libraries
import os, sys
import face_recognition
import cv2
import talkey
from threading import Thread
import time

def welcome(name,delay):                        #TTS function to welcome message
    welcoming = talkey.Talkey('pt-br')
    welcoming.say('Seja bem vindo ' + name)
    time.sleep(delay)


# Get a reference to webcam #0 (the default one)
video_capture = cv2.VideoCapture(0)

#Create a vector with the images in the folder images
path = "/home/deeplearning/PycharmProjects/test/images"
images = sorted(os.listdir(path))

# Initialize some variables
name = []
delay = 7      #Set the delay (in seconds) on the welcome thread
talk = Thread(target=welcome, args=[name,delay])
test = 0
scale = 1/6
normalscale = 6
face_locations = []
face_encodings = []
face_encodingsVector = [None]*len(images)
face_names = []
images_loaded = [None]*len(images)
process_this_frame = True

#Trying to automatizate the face_encoding part
for i in range(0,len(images)):
    images_loaded[i] = face_recognition.load_image_file(images[i])
    face_encodingsVector[i] = face_recognition.face_encodings(images_loaded[i])[0]

while True:
    # Grab a single frame of video
    ret, frame = video_capture.read()

    # Resize frame of video to 1/4 size for faster face recognition processing
    small_frame = cv2.resize(frame, (0, 0), fx=scale, fy=scale)

    # Only process every other frame of video to save time
    if process_this_frame:
        # Find all the faces and face encodings in the current frame of video
        face_locations = face_recognition.face_locations(small_frame)
        face_encodings = face_recognition.face_encodings(small_frame, face_locations,5)

        face_names = []
        for face_encoding in face_encodings:
            # See if the face is a match for the known face(s)
            match = face_recognition.compare_faces(face_encodingsVector, face_encoding)
            name = "Unknown"
            for i in range(0,len(match)):
                if match[i]:
                    nome = images[i].split(".jpg")
                    name = nome[0]
                    if not(talk.is_alive()):
                        talk = Thread(target=welcome,args=[name,delay])       #Thread to welcome the person
                        talk.start()

                    break

            face_names.append(name)

    process_this_frame = not process_this_frame


    # Display the results
    for (top, right, bottom, left), name in zip(face_locations, face_names):
        # Scale back up face locations since the frame we detected in was scaled to 1/4 size
        top *= normalscale
        right *= normalscale
        bottom *= normalscale
        left *= normalscale

        # Draw a box around the face
        cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 255), 2)

        # Draw a label with a name below the face
        cv2.rectangle(frame, (left, bottom - 20), (right, bottom), (0, 255, 255), cv2.FILLED)
        font = cv2.FONT_HERSHEY_DUPLEX
        cv2.putText(frame, name, (left + 6, bottom - 6), font, 0.5, (0, 0, 0), 1)

    # Display the resulting image
    cv2.imshow('Video', frame)

    # Hit 'e' on the keyboard to quit!
    if cv2.waitKey(1) & 0xFF == ord('e'):
        break

# Release handle to the webcam
video_capture.release()
cv2.destroyAllWindows()
